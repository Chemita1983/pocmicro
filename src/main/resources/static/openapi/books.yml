openapi: 3.0.0
info:
  title: Simple Books API
  description: An API to manage books.
  version: 1.0.0
paths:
  /books/{id}:
    get:
      summary: Get a book by ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the book to retrieve
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Book retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDTO'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /books:
    get:
      summary: Get a list of all books
      responses:
        '200':
          description: A list of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookDTO'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
    post:
      summary: Create a new book
      description: Add a new book to the collection.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInputDTO'
      responses:
        '201':
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDTO'
        '400':
          description: Invalid input, data is missing or incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
components:
  schemas:
    BookDTO:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier for the book.
        title:
          type: string
          description: The title of the book.
        genre:
          type: string
          description: The category of the book.
        author:
          type: string
          description: The author of the book.
        year:
          type: integer
          description: The year the book was published.
        age:
          type: integer
          description: The actual age of book.
      required:
        - title
        - genre
        - author
        - year
      example:
        id: 1
        title: "1984"
        genre: "Dystopian"
        author: "George Orwell"
        year: 1949
    BookInputDTO:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier for the book.
        title:
          type: string
          description: The title of the book.
        genre:
          type: string
          description: The category of the book.
        author:
          type: string
          description: The author of the book.
        year:
          type: integer
          description: The year the book was published.
      required:
        - id
        - title
        - genre
        - author
        - year
      example:
        id: 1
        title: "Brave New World"
        genre: "Dystopian"
        author: "Aldous Huxley"
        year: 1932
    ErrorDTO:
      type: object
      properties:
        code:
          type: string
          description: A unique error code identifying the issue.
        description:
          type: string
          description: Detailed description of the error.
        level:
          type: string
          description: Severity level of the error (e.g., INFO, WARNING, ERROR).
        message:
          type: string
          description: A human-readable message explaining the error.
      required:
        - code
        - description
        - level
        - message
      example:
        code: ERR001
        description: The requested book was not found.
        level: ERROR
        message: No book exists with the given ID.
