openapi: 3.0.0
info:
  title: Simple Cars API
  description: An API to manage cars.
  version: 1.0.0
paths:
  /cars/{id}:
    get:
      summary: Get a car by ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the car to retrieve
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Car retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarDTO'
        '404':
          description: Car not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /cars:
    get:
      summary: Get a list of all cars
      responses:
        '200':
          description: A list of cars
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CarDTO'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
    post:
      summary: Create a new car
      description: Add a new car to the list.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CarInputDTO'
      responses:
        '201':
          description: Car created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarDTO'
        '400':
          description: Invalid input, data is missing or incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
components:
  schemas:
    CarDTO:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier of the car.
        brand:
          type: string
          description: The brand of the car.
        model:
          type: string
          description: The model of the car.
        year:
          type: integer
          description: The manufacturing year of the car.
      required:
        - brand
        - model
        - year
      example:
        id: 1
        brand: Toyota
        model: Corolla
        year: 2020
    CarInputDTO:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier of the car.
        brand:
          type: string
          description: The brand of the car.
        model:
          type: string
          description: The model of the car.
        year:
          type: integer
          description: The manufacturing year of the car.
      required:
        - id
        - brand
        - model
        - year
      example:
        id: 1
        brand: Honda
        model: Civic
        year: 2021
    ErrorDTO:
      type: object
      properties:
        code:
          type: string
          description: A unique error code identifying the issue.
        description:
          type: string
          description: Detailed description of the error.
        level:
          type: string
          description: Severity level of the error (e.g., INFO, WARNING, ERROR).
        message:
          type: string
          description: A human-readable message explaining the error.
      required:
        - code
        - description
        - level
        - message
      example:
        code: ERR001
        description: The requested car was not found.
        level: ERROR
        message: No car exists with the given ID.
